@using BSDSalzburg2024.Application.Base.Queries.ListQuery

@inject IMediator mediator
@inject IStringLocalizer<ListCore> localizer

<section class="section">
    <h1 class="title">
        @this.Title
    </h1>
</section>
<section>
    @if (!this.LoadingActive)
    {
        <div class="buttons">
            <button class="button" @onclick="() => this.CreateActiveChanged.InvokeAsync(true)">
                <span class="icon">
                    <i class="fas fa-plus"></i>
                </span>
                <span>@this.localizer["Create"]</span>
            </button>
        </div>
        <table class="table is-striped is-hoverable is-fullwidth">
            <thead>
                <tr>
                    <th></th>
                    @this.HeaderTemplate
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (this.HasData())
                {
                    @this.ListTemplate
                }
                else
                {
                    <tr>
                        <td colspan="8">
                            <div class="level">
                                <div class="level-item has-text-centered">
                                    @this.localizer["NoData"]
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @this.PaginationTemplate
    }
</section>
<div class="modal @(this.LoadingActive ? "is-active" : "")">
    <div class="modal-background"></div>
    <div class="modal-content">
        <section class="hero is-info">
            <div class="hero-body">
                <p class="title">@this.localizer["LoadingData"]</p>
                <p class="subtitle">@this.localizer["PleaseWait"]</p>
            </div>
        </section>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public string Title { get; set; }

    [Parameter, EditorRequired]
    public bool LoadingActive { get; set; }

    [Parameter, EditorRequired]
    public Func<bool> HasData { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<bool> CreateActiveChanged { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment ListTemplate { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment PaginationTemplate { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment HeaderTemplate { get; set; }
}